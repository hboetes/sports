$OpenBSD: patch-CMakeLists_txt,v 1.28 2021/11/07 11:40:10 sthen Exp $

Index: CMakeLists.txt
--- CMakeLists.txt.orig
+++ CMakeLists.txt
@@ -347,7 +347,7 @@ IF(LIBCRYPT_LIBRARY_PATH)
 	SET(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};-L${LIBCRYPT_LIBRARY_PATH};${LIBCRYPT_LIBRARY}")
 	SET(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};-L${LIBSSL_LIBRARY_PATH};${LIBSSL_LIBRARY}")
 ELSE()
-	SET(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};-lcrypt;-lssl")
+	SET(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};-lssl")
 ENDIF()
 
 CHECK_SYMBOL_EXISTS(SSL_set_tlsext_host_name "openssl/ssl.h" HAVE_SSL_TLSEXT_HOSTNAME)
$OpenBSD: patch-cmake_Toolset_cmake,v 1.6 2021/08/20 12:12:07 sthen Exp $

Fails on ports-gcc arches: see CMakeError.log

egcc: error: unrecognized command line option '-fuse-ld=lld'; did you mean '-fuse-ld=bfd'?

Index: cmake/Toolset.cmake
--- cmake/Toolset.cmake.orig
+++ cmake/Toolset.cmake
@@ -65,7 +65,7 @@ if(NOT LINKER_NAME)
     endif()
 endif()
 
-if(LINKER_NAME)
+if(0 AND LINKER_NAME)
     set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}")
     set (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=${LINKER_NAME}")
 
@@ -145,8 +145,8 @@ if (COMPILER_GCC)
     set (CMAKE_C_FLAGS_RELWITHDEBINFO      "${CMAKE_C_FLAGS_RELEASE} -O2 ${COMPILER_FAST_MATH} ${COMPILER_DEBUG_FLAGS}")
     set (CMAKE_CXX_FLAGS_RELWITHDEBINFO    "${CMAKE_CXX_FLAGS_RELEASE} -O2 ${COMPILER_FAST_MATH} ${COMPILER_DEBUG_FLAGS}")
 
-    set (CMAKE_C_FLAGS_RELEASE         "${CMAKE_C_FLAGS_RELEASE} -O3 ${COMPILER_FAST_MATH} -fomit-frame-pointer")
-    set (CMAKE_CXX_FLAGS_RELEASE       "${CMAKE_CXX_FLAGS_RELEASE} -O3 ${COMPILER_FAST_MATH} -fomit-frame-pointer")
+    set (CMAKE_C_FLAGS_RELEASE         "${CMAKE_C_FLAGS_RELEASE} ${COMPILER_FAST_MATH} -fomit-frame-pointer")
+    set (CMAKE_CXX_FLAGS_RELEASE       "${CMAKE_CXX_FLAGS_RELEASE} ${COMPILER_FAST_MATH} -fomit-frame-pointer")
 
     if (ENABLE_FULL_DEBUG MATCHES "ON")
         if (ENABLE_ANALYZER MATCHES "ON")
@@ -166,8 +166,8 @@ if (COMPILER_GCC)
 else ()
     # Clang flags
     set (COMPILER_DEBUG_FLAGS "-g -glldb -gdwarf-aranges -gdwarf-4")
-    set (CMAKE_C_FLAGS_RELEASE         "${CMAKE_C_FLAGS_RELEASE} -O2 -fomit-frame-pointer ${COMPILER_FAST_MATH}")
-    set (CMAKE_CXX_FLAGS_RELEASE       "${CMAKE_CXX_FLAGS_RELEASE} -O2 -fomit-frame-pointer ${COMPILER_FAST_MATH}")
+    set (CMAKE_C_FLAGS_RELEASE         "${CMAKE_C_FLAGS_RELEASE} -fomit-frame-pointer ${COMPILER_FAST_MATH}")
+    set (CMAKE_CXX_FLAGS_RELEASE       "${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer ${COMPILER_FAST_MATH}")
 
     set (CMAKE_C_FLAGS_RELWITHDEBINFO      "${CMAKE_C_FLAGS_RELEASE} -O2 ${COMPILER_FAST_MATH} ${COMPILER_DEBUG_FLAGS}")
     set (CMAKE_CXX_FLAGS_RELWITHDEBINFO    "${CMAKE_CXX_FLAGS_RELEASE} -O2 ${COMPILER_FAST_MATH} ${COMPILER_DEBUG_FLAGS}")
$OpenBSD: patch-contrib_xxhash_CMakeLists_txt,v 1.2 2017/03/08 17:02:13 sthen Exp $
--- contrib/xxhash/CMakeLists.txt.orig	Sun Dec 25 11:19:45 2016
+++ contrib/xxhash/CMakeLists.txt	Sun Mar  5 15:28:36 2017
@@ -3,7 +3,4 @@ SET(XXHASHSRC xxhash.c)
 ADD_LIBRARY(xxhash STATIC ${XXHASHSRC})
 
 IF(ENABLE_FULL_DEBUG MATCHES "OFF")
-if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
-	SET_TARGET_PROPERTIES(xxhash PROPERTIES COMPILE_FLAGS "-O3")
-endif ()
 ENDIF()
$OpenBSD: patch-interface_README_md,v 1.2 2021/08/20 12:12:07 sthen Exp $

Index: interface/README.md
--- interface/README.md.orig
+++ interface/README.md
@@ -16,7 +16,7 @@ Basically this can be done by providing the following 
 
 ~~~ucl
 options {
- dynamic_conf = "/var/lib/rspamd/rspamd_dynamic";
+ dynamic_conf = "${LOCALSTATEDIR}/rspamd/rspamd_dynamic";
 }
 ~~~
 
$OpenBSD: patch-src_CMakeLists_txt,v 1.15 2021/08/20 12:12:07 sthen Exp $

Index: src/CMakeLists.txt
--- src/CMakeLists.txt.orig
+++ src/CMakeLists.txt
@@ -232,9 +232,9 @@ TARGET_LINK_LIBRARIES(rspamd-server ${RSPAMD_REQUIRED_
 ADD_EXECUTABLE(rspamd ${RSPAMDSRC} ${CMAKE_CURRENT_BINARY_DIR}/workers.c)
 SET_TARGET_PROPERTIES(rspamd PROPERTIES LINKER_LANGUAGE CXX)
 SET_TARGET_PROPERTIES(rspamd-server PROPERTIES LINKER_LANGUAGE CXX)
-IF(NOT DEBIAN_BUILD)
+IF(NOT DEBIAN_BUILD AND NOT OPENBSD_BUILD)
 	SET_TARGET_PROPERTIES(rspamd PROPERTIES VERSION ${RSPAMD_VERSION})
-ENDIF(NOT DEBIAN_BUILD)
+ENDIF(NOT DEBIAN_BUILD AND NOT OPENBSD_BUILD)
 
 #TARGET_LINK_LIBRARIES(rspamd ${RSPAMD_REQUIRED_LIBRARIES})
 TARGET_LINK_LIBRARIES(rspamd rspamd-server)
$OpenBSD: patch-src_client_CMakeLists_txt,v 1.7 2021/08/20 12:12:07 sthen Exp $

Index: src/client/CMakeLists.txt
--- src/client/CMakeLists.txt.orig
+++ src/client/CMakeLists.txt
@@ -9,7 +9,7 @@ SET_TARGET_PROPERTIES(rspamc PROPERTIES COMPILE_FLAGS 
 TARGET_LINK_LIBRARIES(rspamc rspamd-server)
 SET_TARGET_PROPERTIES(rspamc PROPERTIES LINKER_LANGUAGE CXX)
 
-IF(NOT DEBIAN_BUILD)
+IF(NOT DEBIAN_BUILD AND NOT OPENBSD_BUILD)
 	SET_TARGET_PROPERTIES(rspamc PROPERTIES VERSION ${RSPAMD_VERSION})
-ENDIF(NOT DEBIAN_BUILD)
+ENDIF(NOT DEBIAN_BUILD AND NOT OPENBSD_BUILD)
 
$OpenBSD: patch-src_lua_lua_cryptobox_c,v 1.1 2021/11/30 23:20:50 tb Exp $

Fix build with opaque EVP_MD_CTX and HMAC_CTX in LibreSSL 3.5.

Index: src/lua/lua_cryptobox.c
--- src/lua/lua_cryptobox.c.orig
+++ src/lua/lua_cryptobox.c
@@ -991,7 +991,7 @@ static void
 lua_cryptobox_hash_dtor (struct rspamd_lua_cryptobox_hash *h)
 {
 	if (h->type == LUA_CRYPTOBOX_HASH_SSL) {
-#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		EVP_MD_CTX_cleanup (h->content.c);
 #else
 		EVP_MD_CTX_reset (h->content.c);
@@ -999,7 +999,7 @@ lua_cryptobox_hash_dtor (struct rspamd_lua_cryptobox_h
 		EVP_MD_CTX_destroy (h->content.c);
 	}
 	else if (h->type == LUA_CRYPTOBOX_HASH_HMAC) {
-#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 		HMAC_CTX_cleanup (h->content.hmac_c);
 		g_free (h->content.hmac_c);
 #else
@@ -1057,7 +1057,7 @@ rspamd_lua_ssl_hmac_create (struct rspamd_lua_cryptobo
 {
 	h->type = LUA_CRYPTOBOX_HASH_HMAC;
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 	h->content.hmac_c = g_malloc0 (sizeof(*h->content.hmac_c));
 #else
 	h->content.hmac_c = HMAC_CTX_new ();
@@ -1452,7 +1452,7 @@ lua_cryptobox_hash_reset (lua_State *L)
 			EVP_DigestInit (h->content.c, EVP_MD_CTX_md (h->content.c));
 			break;
 		case LUA_CRYPTOBOX_HASH_HMAC:
-#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 			/* Old openssl is awesome... */
 			HMAC_Init_ex (h->content.hmac_c, NULL, 0, h->content.hmac_c->md, NULL);
 #else
$OpenBSD: patch-src_rspamadm_CMakeLists_txt,v 1.12 2021/08/20 12:12:07 sthen Exp $

Index: src/rspamadm/CMakeLists.txt
--- src/rspamadm/CMakeLists.txt.orig
+++ src/rspamadm/CMakeLists.txt
@@ -23,9 +23,9 @@ ENDIF()
 ADD_EXECUTABLE(rspamadm ${RSPAMADMSRC})
 TARGET_LINK_LIBRARIES(rspamadm rspamd-server)
 
-IF (NOT DEBIAN_BUILD)
+IF (NOT DEBIAN_BUILD AND NOT OPENBSD_BUILD)
     SET_TARGET_PROPERTIES(rspamadm PROPERTIES VERSION ${RSPAMD_VERSION})
-ENDIF (NOT DEBIAN_BUILD)
+ENDIF (NOT DEBIAN_BUILD AND NOT OPENBSD_BUILD)
 
 SET_TARGET_PROPERTIES(rspamadm PROPERTIES LINKER_LANGUAGE CXX)
 INSTALL(TARGETS rspamadm RUNTIME DESTINATION bin)
