#!/bin/zsh
#
#  pkgutils
#
#  Copyright (c) 2000-2004 Per Liden
#  Copyright (c) 2005-2020 Han Boetes <hboetes@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or (at
#  your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.

source /usr/local/lib/pkgutils.shared

case $(uname) in
    Linux)
        alias tar='tar --owner=root --group=root'
        ;;
    OpenBSD)
        alias tar='gtar --owner=root --group=wheel'
        ;;
esac

beep()
{
    echo -e '\a'
}

if tmpfile=$(env TMPDIR=/root mktemp -t XXXXXXXXXX) > /dev/null 2>&1; then
    echo 'I know it is hard to get used to, but...' >&2
    echo 'Now you have to build packages as user and not as root.' >&2
    rm -f $tmpfile
    exit 1
fi

keep_work()
{
    if [ "$PKGMK_KEEP_WORK" = no ]; then
        message rm -rf $PKGMK_WORK_DIR
        rm -rf $PKGMK_WORK_DIR
    fi
}

get_filename()
{
    local FILE="$(echo $1 | sed 's|^.*://.*/||g')"

    if [ "$FILE" != "$1" ]; then
        FILE="$PKGMK_SOURCE_DIR/$FILE"
    fi

    echo $FILE
}

check_pkgfile()
{
    if [ ! "$name" ]; then
        error1 "Variable \`name' not specified in $PKGMK_PKGFILE."
    elif [ ! "$version" ]; then
        error1 "Variable \`version' not specified in $PKGMK_PKGFILE."
    elif [ ! "$release" ]; then
        error1 "Variable \`release' not specified in $PKGMK_PKGFILE."
    fi
    case $(type build) in
        'build is a shell function from'*) : ;;
        *)
            error1 "Function \`build' not specified in $PKGMK_PKGFILE."
            ;;
    esac
}

check_directory()
{
    if [ ! -d $1 ]; then
        error1 "Directory \`$1' does not exist."
    elif [ ! -w $1 ]; then
        error1 "Directory \`$1' not writable."
    elif [ ! -x $1 ] || [ ! -r $1 ]; then
        error1 "Directory \`$1' not readable."
    fi
}

get_git_repo()
{
    if cd $PKGMK_SOURCE_DIR/$name > /dev/null 2>&1; then
        git fetch
        git checkout "${branch:=master}"
        git pull
        cd -
    else
        # Of course sourcehut doesn't publish .git repos.
        if [[ $1 == *git.sr.ht* ]]; then
            local gitrepo="${1%.git}"
        else
            local gitrepo="$1"
        fi

        if ! git -C $PKGMK_SOURCE_DIR clone "$gitrepo" $name; then
            error1 "Fetching git repostory \`$1' failed."
        fi
        git -C $PKGMK_SOURCE_DIR/$name checkout "${branch:=master}"
    fi
}

download_file()
{
    info "Downloading \`$1'."

    FILENAME=${1##*/}
    PARTIALNAME=$FILENAME.$PART_EXT
    DOWNLOAD_CMD="--no-directories --tries=1 -O $PKGMK_SOURCE_DIR/$PARTIALNAME $1"

    if [ -f $PKGMK_SOURCE_DIR/$PARTIALNAME ]; then
        info "Partial download found, trying to continue..."
        if ! wget -c ${DOWNLOAD_CMD}; then
            # resume failed; check whether is there at all
            if wget --tries=1 --passive-ftp --spider $1; then
                info "Partial downloading failed, restarting..."
                # it's there but resuming is not supported; restart
                rm -f $1.$PART_EXT
                wget ${DOWNLOAD_CMD}
            fi
        fi
    else
        wget ${DOWNLOAD_CMD}
    fi

    if [ $? != 0 -o ! -s $PKGMK_SOURCE_DIR/$PARTIALNAME ];then
        rm -f $PKGMK_SOURCE_DIR/$PARTIALNAME
        error1 "Downloading \`$1' failed."
    fi

    # Test if file is a html file. Workaround buggy sourceforge mirrors.
    if file $PKGMK_SOURCE_DIR/$PARTIALNAME | grep -q 'HTML document text' && [ $PARTIALNAME = "$(echo $PARTIALNAME|sed -e 's|html*$||')" ]; then
        rm -f $PKGMK_SOURCE_DIR/$PARTIALNAME
        error1 "Downloading \`$1' failed."
    fi

    mv $PKGMK_SOURCE_DIR/$PARTIALNAME $PKGMK_SOURCE_DIR/$FILENAME
}

download_source()
{
    local FILE LOCAL_FILENAME

    for FILE in $source; do
         if [[ "$FILE" != "${FILE%.git}" ]]; then
            get_git_repo "$FILE"
            continue
        fi
        LOCAL_FILENAME=$(get_filename $FILE)
        if [ ! -e $LOCAL_FILENAME ]; then
            if [ "$LOCAL_FILENAME" = "$FILE" ]; then
                error1 "Source file \`$LOCAL_FILENAME' not found (can not be downloaded, URL not specified)."
            else
                if [ "$PKGMK_DOWNLOAD" = yes ]; then
                    download_file $FILE
                else
                    error1 "Source file \`$LOCAL_FILENAME' not found (use option -d to download)."
                fi
            fi
        fi
    done
}

unpack_source()
{
    local FILE LOCAL_FILENAME COMMAND

    for FILE in $source; do
        LOCAL_FILENAME=$(get_filename $FILE)
        case $LOCAL_FILENAME in
            *.tar.gz|*.tar.Z|*.tgz)
                COMMAND="tar -xzf $LOCAL_FILENAME -C $SRC" ;;
            *tar.xz)
                COMMAND="xzcat $LOCAL_FILENAME |tar -xf - -C $SRC" ;;
            *.tar.bz2)
                COMMAND="bzcat $LOCAL_FILENAME | tar -xf - -C $SRC" ;;
            *.zip)
                COMMAND="unzip -qq -o -d $SRC $LOCAL_FILENAME" ;;
            *.git)
                COMMAND="cp -r $PKGMK_SOURCE_DIR/$name $SRC" ;;
            *)
                COMMAND="cp $LOCAL_FILENAME $SRC" ;;
        esac

        echo "$COMMAND"

        if ! eval $COMMAND; then
            keep_work
            error1 "Preparing source code for \`$TARGET' failed."
        fi
    done
}

create_package()
{
    message "Creating package."
    source $1
    target="$2/${name}_$version-$release.pkg.tar.gz"
    # Install metadata.
    database=var/package
    install -d $database
    cat << EOF > $database/$name-metadata
name=$name
version=$version
release=$release

EOF
    typeset -f post-install post-uninstall >> $database/$name-metadata
    # Remove info/dir files, they're properly generated by pkgadd.
    rm -f usr/{local/,}{share/,}info/dir
    tar -czvvpf $target * | egrep -v " (var/package|var/$)" 2>&1 | grep -v 'Removing leading.*from member names'
}

make_footprint()
{
    pkginfo -f $TARGET | sort -k 3
}

make_md5sum()
{
    local FILE LOCAL_FILENAMES
    # md5 foo bar bla is a lot more efficient than for i in foo bar bla; md5 $i
    for FILE in $source; do
        # Git files don't have an md5sum.
        [[ $FILE != ${FILE%.git} ]] && continue
        LOCAL_FILENAMES=($LOCAL_FILENAMES $(get_filename $FILE))
    done
    if [[ $LOCAL_FILENAMES != "" ]]; then
        ${MD5} $LOCAL_FILENAMES | sed -e 's|/.*/||' | sort -k2
    fi
}

update_md5sum()
{
    if ! make_md5sum > $PKGMK_MD5SUM; then
        error "Can't update the footprint."
        keep_work
        error1 "Building \`$TARGET' failed."
    fi
}

check_md5sum()
{
    local TMPFILE="$PKGMK_WORK_DIR/.tmp"
    cd $PKGMK_ROOT || error "Can't access directory $PKGMK_ROOT."

    if [ -f $PKGMK_MD5SUM ]; then
        make_md5sum > $TMPFILE.md5sum
        sort -k 2 $PKGMK_MD5SUM > $TMPFILE.md5sum.orig
        # Add a special test for the serious kind of md5sum differences
        # -D on GNU
        sort -k2 $TMPFILE.md5sum.orig $TMPFILE.md5sum |uniq -u|uniq -d -f1 > $TMPFILE.md5sum_secdiff
        if [ -s $TMPFILE.md5sum_secdiff ]; then
            error "Identical file with different md5sum found:"
            echo
            cat $TMPFILE.md5sum_secdiff
            cat << EOF >&2

This can mean various things:

 - The download of that source package failed. Remove the source file
   with:

     $PKGMK -c

 - If this results in the same error, the source package may have been
   tampered with. Send the maintainer of this package an email and ask
   him to double-check the problem, and to take necessary steps.

 - You are maintaining this package and you just changed a file included
   in the ports-dir and you know what you are doing.

EOF
        fi
        diff -w -t -U 0 $TMPFILE.md5sum.orig $TMPFILE.md5sum | \
            sed '/^@@/d;/^+++/d;/^---/d;s/^+/NEW       /g;s/^-/MISSING   /g' \
            > $TMPFILE.md5sum.diff
        if [ -s $TMPFILE.md5sum.diff ]; then
            error "Md5sum mismatch found:"
            cat $TMPFILE.md5sum.diff
            question 'Do you want me to update the md5sum? [y/N] '
            if [ "$answer" = y ] || [ "$answer" = Y ]; then
                replaceyn Y
                update_md5sum
            else
                replaceyn N
                keep_work
                error1 "Building \`$TARGET' failed."
            fi
        fi
    else
        warning "md5sum file not found, creating new."
        update_md5sum
    fi
}

strip_files()
{
    local FILE FILTER

    if [ -f $PKGMK_ROOT/$PKGMK_NOSTRIP ]; then
        FILTER="grep -v -f $PKGMK_ROOT/$PKGMK_NOSTRIP"
    else
        FILTER="cat"
    fi

    cd $PKG
    find ./{,/usr,/usr/X11R6}{,/local}/{sbin,bin,lib{,64,exec}} -type f 2> /dev/null | \
           $FILTER | while read FILE; do
        # Some packages install files without write perms. I chmod -w
        # all binary files and manpages so that's no problem later on.
        case "$(file -b $FILE)" in
            *statically*)
                : ;; # ignore
            *ELF*executable*not\ stripped)
                strip --strip-all "$FILE" ;;
            *ELF*shared*object*not\ stripped)
                strip --strip-unneeded "$FILE" ;;
            *current*ar\ archive)
                strip --strip-debug "$FILE";;
        esac
    done
}

compress_manpages()
{
    local FILE DIR TARGET

    cd $PKG

    find . -type f -path "*/man/man*/*" | while read FILE; do
        if [ "$FILE" = "${FILE%%.gz}" ]; then
            gzip "$FILE"
        fi
    done

    find . -type l -path "*/man/man*/*" | while read FILE; do
        TARGET=$(readlink -n "$FILE")
        TARGET="${TARGET##*/}"
        TARGET="${TARGET%%.gz}.gz"
        rm -f "$FILE"
        FILE="${FILE%%.gz}.gz"
        DIR="${FILE%/*}"

        if [ -e "$DIR/$TARGET" ]; then
            ln -sf "$TARGET" "$FILE"
        fi
    done
}

check_footprint()
{
    local FILE="$PKGMK_WORK_DIR/.tmp"

    cd $PKGMK_ROOT || exit1 "Can't access $PKGMK_ROOT"

    if [ -f $TARGET ]; then
        make_footprint > $FILE.footprint
        if [ -f $PKGMK_FOOTPRINT.gz ]; then
            gunzip $PKGMK_FOOTPRINT.gz
        fi
        if [ -f $PKGMK_FOOTPRINT ]; then
            sort -k 3 $PKGMK_FOOTPRINT > $FILE.footprint.orig
            diff -w -t -U 0 $FILE.footprint.orig $FILE.footprint |\
                sed '/^@@/d;/^+++/d;/^---/d;s/^+/NEW       /g;s/^-/MISSING   /g' \
                > $FILE.footprint.diff
            if [ -s $FILE.footprint.diff ]; then
                echo "Footprint mismatch found:"
                cat $FILE.footprint.diff
                while :; do
                    question '[u]pdate footprint/[i]gnore footprint mismatch/[e]rror [u/i/e] '
                    case $answer in
                        u|U)
                            update_footprint
                            break
                            ;;
                        i|I)
                            break
                            ;;
                        e|E)
                            # Make sure the $TARGET is marked as not up to date.
                            touch $PKGMK_ROOT/$PKGMK_PKGFILE
                            error1 "Building \`$TARGET' failed, keeping workdirectory for inspection."
                            ;;
                    esac
                done
            fi
            if [ -r $PKGMK_FOOTPRINT ]; then
                gzip -f $PKGMK_FOOTPRINT
            fi
        else
            warning "Footprint not found, creating new."
            mv $FILE.footprint $PKGMK_FOOTPRINT
            gzip $PKGMK_FOOTPRINT
        fi
    else
        error "Package \`$TARGET' was not found."
        BUILD_SUCCESSFUL=no
    fi
}

build_package()
{
    local BUILD_SUCCESSFUL=no

    info "Building \`$TARGET'."

    export PKG="$PKGMK_WORK_DIR/pkg"
    export SRC="$PKGMK_WORK_DIR/src"
    umask 022

    cd $PKGMK_ROOT

    if [ "$SHORTCIRCUIT" != yes ]; then
        message rm -rf $PKGMK_WORK_DIR
        rm -rf $PKGMK_WORK_DIR
        mkdir -p $SRC $PKG
        if [ "$PKGMK_IGNORE_MD5SUM" = no ]; then
            check_md5sum
        fi
        unpack_source
    else
        rm -rf $PKG
        mkdir -p $PKG
    fi

    cd $SRC
    # required for cvs packages.
    export PKGMK_SOURCE_DIR
    message build
    set -e
    source $PKGMK_ROOT/$PKGMK_PKGFILE
    typeset -ft build
    build
    set +e

    if [ $? -eq 0 ]; then
        cd $PKG
        if [ "$PKGMK_NO_STRIP" = no ]; then
            strip_files
        fi

        compress_manpages

        # Make all binaries and docfiles unwritable
        find $PKG/{,usr,usr/local}/{bin,sbin,man,share/man} -type f -print0 2> /dev/null | xargs -r0 chmod -w

        info "Build result:"
        create_package $PKGMK_ROOT/$PKGMK_PKGFILE $PKGMK_PACKAGE_DIR

        if [ $? = 0 ]; then
            BUILD_SUCCESSFUL=yes

            if [ "$PKGMK_IGNORE_FOOTPRINT" = yes ]; then
                warning "Footprint ignored."
            else
                check_footprint
            fi
        fi
    elif [ "$PKGMK_KEEP_ON_ERROR" = yes ]; then
        error1 "Building \`$TARGET' failed, keeping workdirectory for inspection."
    fi

    keep_work

    if [ "$BUILD_SUCCESSFUL" = yes ]; then
        info "Building \`$TARGET' succeeded."
    else
        if [ -f $TARGET ]; then
            touch -r $PKGMK_ROOT/$PKGMK_PKGFILE $TARGET 2> /dev/null
        fi
        error1 "Building \`$TARGET' failed."
    fi
}

install_package()
{
    local COMMAND OPTIONS

    info "Installing \`$TARGET'."

    case $PKGMK_INSTALL in
        install)
            OPTIONS=
            ;;
        force_install)
            OPTIONS="-f"
            ;;
        upgrade)
            OPTIONS="-u"
            ;;
        force_upgrade)
            OPTIONS="-u -f"
            ;;
    esac
    COMMAND="sudo pkgadd $OPTIONS $TARGET"
    cd $PKGMK_ROOT
    info "$COMMAND"

    ${COMMAND} 2> /dev/null
    errorcode=$?
    # Give proper errormessages.
    if [ $errorcode -eq 12 ]; then
        echo "These files are conflicting." >&2
        case $PKGMK_INSTALL in
            install) echo "Use $PKGMK -fi to ignore and overwrite." >&2 ;;
            upgrade) echo "Use $PKGMK -fu to ignore and overwrite." >&2 ;;
        esac
    elif [ $errorcode -eq 10 ]; then
        echo "Package \`$TARGET' not previously installed." >&2
        echo "Use $PKGMK -i to install." >&2
    elif [ $errorcode -eq 11 ]; then
        echo "Package \`$TARGET' already installed." >&2
        echo "Use $PKGMK -u to upgrade." >&2
    fi

    if [ $errorcode -eq 0 ]; then
        info "Installing \`$TARGET' succeeded."
        exit 0
    else
        error1 "Installing \`$TARGET' failed." >&2
    fi
}

recursive()
{
    local ARGS FILE DIR

    ARGS=$(echo "$@" | sed -e 's/--recursive//g;s/-r//g')

    for FILE in $(find $PKGMK_ROOT -name $PKGMK_PKGFILE | sort); do
        DIR="$(dirname $FILE)/"
        if [ -d $DIR ]; then
            info "Entering directory \`$DIR'."
            (cd $DIR && $PKGMK_COMMAND $ARGS)
            info "Leaving directory \`$DIR'."
        fi
    done
}

clean()
{
    local FILE LOCAL_FILENAME

    if [ -f $TARGET ]; then
        info "Removing $TARGET"
        rm -f $TARGET
    fi

    for FILE in $source; do
        if [[ "$FILE" != "${FILE%.git}" ]]; then
            if [[ -d ${PKGMK_SOURCE_DIR:?}/$name ]]; then
                info "Removing git clone directory \`$PKGMK_SOURCE_DIR/$name'"
                rm -rf ${PKGMK_SOURCE_DIR:?}/$name
            else
                info "git clone directory \`$PKGMK_SOURCE_DIR/$name' has already been removed."
            fi
        fi
        LOCAL_FILENAME=$(get_filename $FILE)
        if [ -e "$LOCAL_FILENAME" ] && [ "$LOCAL_FILENAME" != "$FILE" ]; then
            info "Removing $LOCAL_FILENAME"
            rm -f $LOCAL_FILENAME
        fi
        if [ -e "$LOCAL_FILENAME.$PART_EXT" ]; then
            info "Removing $LOCAL_FILENAME.$PART_EXT"
            rm -f "$LOCAL_FILENAME.$PART_EXT"
        fi
    done

    if [ -d $PKGMK_WORK_DIR ]; then
        info "Removing $PKGMK_WORK_DIR"
        keep_work
    fi
}

update_footprint()
{
    if [ ! -f $TARGET ]; then
        error1 "Unable to update footprint. File \`$TARGET' not found."
    fi

    make_footprint > $PKGMK_FOOTPRINT
    gzip -f $PKGMK_FOOTPRINT
    touch $TARGET

    info "Footprint updated."
}

build_needed()
{
    local FILE RESULT

    RESULT=yes
    if [ -f $TARGET ]; then
        RESULT=no
        for FILE in $PKGMK_PKGFILE $source; do
            if [[ $FILE != ${FILE%.git} ]]; then
                continue
            fi
            FILE=$(get_filename $FILE)
            if [ ! -e $FILE ] || [ ! $TARGET -nt $FILE ]; then
                RESULT=yes
                break
            fi
        done
    fi

    echo $RESULT
}

interrupted()
{
    echo
    error "Interrupted."

    keep_work

    exit 1
}

print_help()
{
    cat << EOF
usage: ${PKGMK##*/} [options]
options:
  -i,   --install             build and install packag
  -fi,  --force-install       build and install package (ignore conflicts)
  -u,   --upgrade             build and upgrade package
  -fu,  --force-upgrade       build and upgrade package (ignore conflicts)
  -r,   --recursive           search for and build packages recursively
  -d,   --download            download missing source file(s)
  -do,  --download-only       do not build, only download missing source file(s)
  -utd, --up-to-date          do not build, only check if package is up to date
  -uf,  --update-footprint    update footprint using result from last build
  -if,  --ignore-footprint    build package without checking footprint
  -um,  --update-md5sum       update md5sum
  -im,  --ignore-md5sum       build package without checking md5sum
  -ns,  --no-strip            do not strip executable binaries or libraries
  -f,   --force               build package even if it appears to be up to date
  -s,   --short-circuit       do not unpack the source before building
  -c,   --clean               remove package and downloaded source files
  -up,  --update-port         clean, remove footprint, edit Pkgfile, build, upgrade
  -kw,  --keep-work           keep temporary working directory
  -cf,  --config-file <file>  use alternative configuration file
  -v,   --version             print version and exit
  -h,   --help                print help and exit
EOF
}

parse_options()
{
    while [ $# -ge 1 ]; do
        case $1 in
            -i|--install)
                PKGMK_INSTALL=install ;;
            -fi|--force-install)
                PKGMK_INSTALL=force_install ;;
            -u|--upgrade)
                PKGMK_INSTALL=upgrade ;;
            -fu|--force-upgrade)
                PKGMK_INSTALL=force_upgrade ;;
            -r|--recursive)
                PKGMK_RECURSIVE=yes ;;
            -d|--download)
                PKGMK_DOWNLOAD=yes ;;
            -do|--download-only)
                PKGMK_DOWNLOAD=yes
                PKGMK_DOWNLOAD_ONLY=yes ;;
            -utd|--up-to-date)
                PKGMK_UP_TO_DATE=yes ;;
            -uf|--update-footprint)
                PKGMK_UPDATE_FOOTPRINT=yes ;;
            -if|--ignore-footprint)
                PKGMK_IGNORE_FOOTPRINT=yes ;;
            -um|--update-md5sum)
                PKGMK_UPDATE_MD5SUM=yes ;;
            -up|--update-port)
                if [ -r $PKGMK_FOOTPRINT ]; then
                    warning "Removing footprint \`$PKGMK_FOOTPRINT'"
                    rm $PKGMK_FOOTPRINT
                fi
                PKGMK_INSTALL=upgrade
                PKGMK_UPDATE_PORT=yes ;;
            -im|--ignore-md5sum)
                PKGMK_IGNORE_MD5SUM=yes ;;
            -ns|--no-strip)
                PKGMK_NO_STRIP=yes ;;
            -f|--force)
                PKGMK_FORCE=yes ;;
            -s|--short-circuit)
                SHORTCIRCUIT=yes ;;
            -c|--clean)
                PKGMK_CLEAN=yes ;;
            -kw|--keep-work)
                PKGMK_KEEP_WORK=yes ;;
            -cf|--config-file)
                if [ ! "$2" ]; then
                    error1 "$PKGMK: option \`$1' requires an argument"
                fi
                PKGMK_CONFFILE="$2"
                shift ;;
            -v|--version)
                version
                ;;
            -h|--help)
                print_help
                exit 0 ;;
            *)
                error1 "$PKGMK: invalid option $1  Use \`$PKGMK -h' for help."
                ;;
        esac
        shift
    done
}

remove_perlcrap()
{
    # Remove perlcrap
    find $PKG \
        \( \
        -name '.packlist' -or \
        -name '*.bs' -or \
        -name autosplit.ix -or \
        -name perllocal.pod \
        \) \
        -delete
    # Remove empty directories, ignore return code
    find $PKG -depth -type d -delete > /dev/null 2>&1 || :
}

main()
{
    local FILE TARGET

    parse_options "$@"

    if [ $(whoami) = root ]; then
        error  'I know it is hard to get used to, but...'
        error1 'Now you have to build packages as user and not as root.'
    fi

    if [ "$PKGMK_RECURSIVE" = yes ]; then
        recursive "$@"
        exit 0
    fi

    for FILE in $PKGMK_CONFFILE $PKGMK_ROOT/$PKGMK_PKGFILE; do
        if [ ! -f $FILE ]; then
            error1 "File \`$FILE' not found."
        fi
        source $FILE
    done

    check_directory "$PKGMK_SOURCE_DIR"
    check_directory "$PKGMK_PACKAGE_DIR"
    check_directory "${PKGMK_WORK_DIR%/*}"
    check_pkgfile

    TARGET="$PKGMK_PACKAGE_DIR/${name}_$version-$release.pkg.tar.gz"

    if [ "$PKGMK_UPDATE_PORT" = yes ]; then
        if ! whence -p "$EDITOR" > /dev/null; then
            error1 "You haven't set your \$EDITOR environment variable."
        fi
        clean
        rm -f $PKGMK_MD5SUM
        $EDITOR $PKGMK_PKGFILE
    fi

    if [ "$PKGMK_CLEAN" = yes ]; then
        clean
        exit 0
    fi

    if [ "$PKGMK_UPDATE_FOOTPRINT" = yes ]; then
        update_footprint
        exit 0
    fi

    if [ "$PKGMK_UPDATE_MD5SUM" = yes ]; then
        download_source
        make_md5sum > $PKGMK_MD5SUM
        info "Md5sum updated."
        exit 0
    fi

    if [ "$PKGMK_DOWNLOAD_ONLY" = yes ]; then
        download_source
        exit 0
    fi

    if [ "$PKGMK_UP_TO_DATE" = yes ]; then
        if [ $(build_needed) = yes ]; then
            info "Package \`$TARGET' is not up to date."
        else
            info "Package \`$TARGET' is up to date."
        fi
        exit 0
    fi

    if [ $(build_needed) = no ] && [ "$PKGMK_FORCE" = no ]; then
        info "Package \`$TARGET' is up to date."
    else
        download_source
        build_package
    fi

    if [ "$PKGMK_INSTALL" != no ]; then
        install_package
    fi

    exit 0
}

trap "interrupted" 1 2 3 15

export PATH='/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/X11R6/bin'
export LC_ALL=POSIX

readonly PKGMK_COMMAND=$0
readonly PKGMK=${PKGMK_COMMAND##*/}
readonly PKGMK_ROOT="$PWD"
readonly PKGMK_ARGS="$*"

PKGMK_CONFFILE=/etc/pkgmk.conf
PKGMK_PKGFILE=Pkgfile
PKGMK_FOOTPRINT=footprint
PKGMK_MD5SUM=md5sum
PKGMK_NOSTRIP=nostrip
PART_EXT=pkgmk-partial

PKGMK_SOURCE_DIR='/usr/pkgmk/source'
PKGMK_PACKAGE_DIR='/usr/pkgmk/package'
PKGMK_WORK_DIR="/usr/pkgmk/work/${PWD##*/}"

PKGMK_INSTALL=no
PKGMK_RECURSIVE=no
PKGMK_DOWNLOAD=yes
PKGMK_DOWNLOAD_ONLY=no
PKGMK_UP_TO_DATE=no
PKGMK_UPDATE_FOOTPRINT=no
PKGMK_IGNORE_FOOTPRINT=no
PKGMK_UPDATE_PORT=no
PKGMK_FORCE=no
PKGMK_KEEP_WORK=no
PKGMK_KEEP_ON_ERROR=no
PKGMK_UPDATE_MD5SUM=no
PKGMK_IGNORE_MD5SUM=no
PKGMK_NO_STRIP=no
PKGMK_CLEAN=no

SHORTCIRCUIT=no

GNOME_MIRROR='ftp://ftp.gnome.org/pub/GNOME/sources'
GNU_MIRROR='ftp://ftp.gnu.org/gnu'
KDE_MIRROR='ftp://ftp.kde.org/pub/kde'
PERL_MIRROR='ftp://ftp.cpan.org/pub/CPAN/modules/by-module'
SOURCEFORGE_MIRROR='http://dl.sourceforge.net/sourceforge'

main "$@"
beep
exit 0
